function _opaque_object_manager_base_hpp()
	let l:filename = expand('%:t:r')
	let l:capitalized = toupper(strpart(l:filename, 0, 1)) . strpart(l:filename, 1)
	let l:trait_name = l:capitalized . "_traits"
	call append(line('.') - 1, [
		\ "	struct " . l:trait_name,
		\ "	{",
		\ "//FRIEND",
		\ "		public:",
		\ "			friend flnx::Opaque_object_manager_base<flnx::" . l:trait_name . ">;",
		\ "", "", "",
		\ "//HANDLE",
		\ "		public:",
		\ "			FNX_DEFINE_HANDLE(Handle);",
		\ "", "", "",
		\ "//INFO",
		\ "		public:",
		\ "			struct Info",
		\ "			{",
		\ "				",
		\ "			};",
		\ "", "", "",
		\ "//CREATE_INFO",
		\ "		public:",
		\ "			struct Create_info",
		\ "			{",
		\ "				", "",
		\ "				fnx::Result is_valid	(flnx::" . l:trait_name . "::Info const& info) const",
		\ "				{",
		\ "					(void)info;",
		\ "",
		\ "					return	(fnx::Result::SUCCESS);",
		\ "				}",
		\ "			};",
		\ "", "", "",
		\ "//CREATE_DEPENDENCIES",
		\ "		public:",
		\ "			struct Create_dependencies",
		\ "			{",
		\ "				",
		\ "",
		\ "				fnx::Result is_valid	(void) const",
		\ "				{",
		\ "					",
		\ "".
		\ "					return	(fnx::Result::SUCCESS);",
		\ "				}",
		\ "			};",
		\ "", "", "",
		\ "//DATA",
		\ "		public:",
		\ "			struct Data",
		\ "			{",
		\ "				flnx::" . l:capitalized . "::Create_info					create_info{};",
		\ "				flnx::" . l:capitalized . "::Create_dependencies	create_dependencies{};",
		\ "			};",
		\ "",
		\ "		private:",
		\ "			struct _Data",
		\ "				:public flnx::" . l:trait_name . "::Data",
		\ "			{",
		\ "				",
		\ "			};",
		\ "		};",
		\ "", "", "",
		\ "	class " . l:capitalized,
		\ "		:public flnx::Opaque_object_manager_base<flnx::" . l:trait_name . ">",
		\ "	{",
		\ "//TYPEDEF",
		\ "		private:",
		\ "			typedef flnx::Opaque_object_manager_base<flnx::" . l:trait_name . ">",
		\ "				_Opaque_object_manager_base_typedef;",
		\ "",
		\ "		public:",
		\ "			typedef typename _Opaque_object_manager_base_typedef::Handle_typedef",
		\ "				Handle_typedef;",
		\ "			typedef typename _Opaque_object_manager_base_typedef::Info_typedef",
		\ "				Info_typedef;",
		\ "			typedef typename _Opaque_object_manager_base_typedef::Create_info_typedef",
		\ "				Create_info_typedef;",
		\ "			typedef typename _Opaque_object_manager_base_typedef::Create_dependencies_typedef",
		\ "				Create_dependencies_typedef;",
		\ "			typedef typename _Opaque_object_manager_base_typedef::Data_typedef",
		\ "				Data_typedef;",
		\ "",
		\ "		private:",
		\ "			typedef typename _Opaque_object_manager_base_typedef::_Data_typedef",
		\ "				_Data_typedef;",
		\ "			typedef typename _Opaque_object_manager_base_typedef::_Data_map_typedef",
		\ "				_Data_map_typedef;",
		\ "			typedef typename _Opaque_object_manager_base_typedef::_Info_typedef",
		\ "				_Info_typedef;",
		\ "", "", "",
		\ "		public:",
		\ "			using _Opaque_object_manager_base_typedef::create;",
		\ "			fnx::Result init_info	(Create_dependencies_typedef const& create_dependencies);",
		\ "			fnx::Result create	(Handle_typedef const& handle);",
		\ "			fnx::Result	destroy	(Handle_typedef const& handle);",
		\ "		private:",
		\ "			fnx::Result _evaluate_create_info_change",
		\ "				(Create_info_typedef const& old_create_info",
		\ "				,Create_info_typedef const& new_create_info) const;",
		\ "", "", ""
		\ ])
		call deletebufline('%', line('.'), line('.') + 1)
endfunction

function _opaque_object_manager_base_cpp()
	let l:filename = expand('%:t:r')
	let l:capitalized = toupper(strpart(l:filename, 0, 1)) . strpart(l:filename, 1)
	call append(line('.') - 1, [
		\ "fnx::Result flnx::" . l:capitalized . "::init_info",
		\ "	(flnx::" . l:capitalized . "::Create_dependencies_typedef const& create_dependencies)",
		\ "{",
		\ "	if	(create_dependencies.is_valid() != fnx::Result::SUCCESS)",
		\ "		return	(create_dependencies.is_valid());",
		\ "	if	(this->_info.has_value())",
		\ "		return	(fnx::Result::SUCCESS)",
		\ "",
		\ "	flnx::" . l:capitalized . "::Info_typedef	info{};",
		\ "	this->_info	= info;",
		\ "",
		\ "	return	(fnx::Result::SUCCESS);",
		\ "}",
		\ "",
		\ "fnx::Result flnx::" . l:capitalized . "::create	(flnx::" . l:capitalized . "::Handle_typedef const& handle)",
		\ "{",
		\ "	if	(this->_data_map.find(handle) == this->_data_map.end())",
		\ "		return	(fnx::Result::INVALID_HANDLE);",
		\ "",
		\ "	flnx::" . l:capitalized . "::_Data_typedef& data	= this->_data_map.find(handle)->second;",
		\ "	(void)data;",
		\ "",
		\ "	return	(fnx::Result::SUCCESS);",
		\ "}",
		\ "",
		\ "fnx::Result flnx::" . l:capitalized . "::destroy	(flnx::" . l:capitalized . "::Handle_typedef const& handle)",
		\ "{",
		\ "	typename flnx::" . l:capitalized . "::_Data_map_typedef::iterator it	=	this->_data_map.find(handle);",
		\ "",
		\ "	if	(it == this->_data_map.end())",
		\ "		return	(fnx::Result::INVALID_HANDLE);",
		\ "",
		\ "	",
		\ "}",
		\ "",
		\ "fnx::Result flnx::" . l:capitalized . "::_evaluate_create_info_change",
		\ "	(flnx::" . l:capitalized . "::Create_info_typedef const& old_create_info",
		\ "	,flnx::" . l:capitalized . "::Create_info_typedef const& new_create_info) const",
		\ "{",
		\ "	if	(!this->_info.has_value())",
		\ "		return	(fnx::Result::INFO_NOT_INITIALIZED);",
		\ "	if	(new_create_info.is_valid	(*this->_info) != fnx::Result::SUCCESS",
		\ "		|| old_create_info.is_valid	(*this->_info) != fnx::Result::SUCCESS)",
		\ "	{",
		\ "		return	(fnx::Result::INVALID_CREATE_INFO);",
		\ "	}",
		\ "	return	(fnx::Result::SUCCCESS);",
		\ "}",
		\ ""
		\ ])
endfunction
